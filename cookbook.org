#+TITLE: Cookbook
#+STARTUP: showall

* Data

** Hash Tables

Use =make-hash-table= to create a hash table.

#+BEGIN_SRC lisp
(defparameter *my-hash* (make-hash-table))
#+END_SRC

#+RESULTS:
: *MY-HASH*

Use =gethash= to access values by key.

#+BEGIN_SRC lisp
  (gethash 'my-key *my-hash*)
#+END_SRC

Use =setf= to create entries.

#+BEGIN_SRC lisp
  (setf (gethash 'my-key *my-hash*) "my value")
#+END_SRC

#+RESULTS:
: my value

The function =gethash= returns the value as well as a boolean that
expresses if the key was present.  Use =multiple-value-bind= to use
both.

#+BEGIN_SRC lisp :results output
  (setf (gethash 'my-nil-value *my-hash*) nil)

  (defun verbose-gethash (key hash)
    (multiple-value-bind (val exists-p)
	(gethash key hash)
      (if exists-p
	  (format t "The key ~a exists in ~a~%" key hash)
	  (format t "The key ~a does not exist in ~a~%" key hash))
      val))

  (verbose-gethash 'my-nil-value *my-hash*)
  (verbose-gethash 'my-nonexistent-value *my-hash*)
#+END_SRC

#+RESULTS:
: The key MY-NIL-VALUE exists in #<HASH-TABLE :TEST EQL :COUNT 2 {52836669}>
: The key MY-NONEXISTENT-VALUE does not exist in #<HASH-TABLE :TEST EQL :COUNT 2 {52836669}>

** Association Lists

Association lists, or /alists/ are lists of cons cells.

#+BEGIN_SRC lisp
  (defparameter *my-alist* '((a . 1)
			     (b . 2)
			     (c . 3)))
#+END_SRC

Cons pairs can be retrieves from an alist using the =assoc= function.

#+BEGIN_SRC lisp
  (assoc 'a *my-alist*)
#+END_SRC

#+RESULTS:
: (A . 1)

If you just want the value of the cons cell, you can use =cdr= on the
result.

#+BEGIN_SRC lisp
  (cdr (assoc 'a *my-alist*))
#+END_SRC

#+RESULTS:
: 1

The =assoc= function scans the list from front to back, so /shadowing/
can occur on duplicate keys.  Be careful out there.

#+BEGIN_SRC lisp
  (cdr (assoc 'a '((a . "the first value")
		   (a . "the second value"))))
#+END_SRC

#+RESULTS:
: the first value

You can add a new element to the front of a list by consing a new cons
cell to the front, or by using the =acons= function.

#+BEGIN_SRC lisp
  (setf *my-alist* (cons '(z . 26) *my-alist*))
#+END_SRC

#+RESULTS:
: ((Z . 26) (A . 1) (B . 2) (C . 3))

#+BEGIN_SRC lisp
  (setf *my-alist* (acons 'x 24 *my-alist*))
#+END_SRC

#+RESULTS:
: ((X . 24) (Y . 25) (Z . 26) (A . 1) (B . 2) (C . 3))

You can also use =push=.

#+BEGIN_SRC lisp
  (push '(y . 25) *my-alist*)
#+END_SRC

#+RESULTS:
: ((Y . 25) (Z . 26) (A . 1) (B . 2) (C . 3))

Zip up a list of keys and values with =pairlis=.  Ordering is not
guaranteed.

#+BEGIN_SRC lisp
  (pairlis '(a b c d e f g) '(1 2 3 4 5 6 7))
#+END_SRC

#+RESULTS:
: ((G . 7) (F . 6) (E . 5) (D . 4) (C . 3) (B . 2) (A . 1))

** Property Lists

Property lists, or /plists/, are lists in the keys and values
alternate.  You should only use symbols for keys.

#+BEGIN_SRC lisp
  (defparameter *my-plist* '(:name "Alex" :age 28 :language "English"))
#+END_SRC

Elements can be accessed with =getf=.

#+BEGIN_SRC lisp :results output
  (defun show-info (plist)
    (format t "Name is ~a.  Age is ~d.  Language: ~a~%"
	    (getf plist :name)
	    (getf plist :age)
	    (getf plist :language)))

  (show-info *my-plist*)
#+END_SRC

#+RESULTS:
: Name is Alex.  Age is 28.  Language: English

Elements can be set with =setf=.

#+BEGIN_SRC lisp :results output
  (setf (getf *my-plist* :language) "LISP")
  (show-info *my-plist*)
#+END_SRC

#+RESULTS:
: Name is Alex.  Age is 28.  Language: LISP

* Strings

Replace all instances of a substring within a string.

#+BEGIN_SRC lisp
(defun replace-all (string part replacement &key (test #'char=))
  "Returns a new string in which all the occurences of the part
is replaced with replacement."
  (with-output-to-string (out)
    (loop with part-length = (length part)
       for old-pos = 0 then (+ pos part-length)
       for pos = (search part string
                         :start2 old-pos
                         :test test)
       do (write-string string out
                        :start old-pos
                        :end (or pos (length string)))
       when pos do (write-string replacement out)
       while pos)))
#+END_SRC

* File

** Read File

As a string.

#+BEGIN_SRC lisp
  (with-open-file (stream "~/src/lisproom/README.org")
    (let ((contents (make-string (file-length stream))))
      (read-sequence contents stream)
      contents))
#+END_SRC

As a list of lines.

#+BEGIN_SRC lisp
  (with-open-file (stream "~/src/lisproom/README.org")
    (loop for line = (read-line stream nil)
       while line
       collect line))
#+END_SRC
